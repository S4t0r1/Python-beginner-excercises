#This one is size 3x3 dependent, but can be easily adapted for any size above 3x3 by adding additional func and replacing few values..

def build_gameboard(): #builds gameboard as a list of lists (3x3)..
    board = []
    for i in range(3):
        row = [(' ') for e in range(3)]
        board.append(row)
    return board

def txt_display(move): #keeps switching txt/turn for use in ask_player and play_again funcs..
    if move % 2 == 0:
        txt = 'PLAYER_1,'
    else:
        txt = 'PLAYER_2,'
    return txt 

def ask_player(txt): #thnx to txt_display func, 1 prompt is sufficient..
    player = input(txt + " please choose your coordinates[num,num](1=min,3=max).").split(',')
    return player

def player_symbol(move,board,n,m): #keeps switching symbols according to move count as we have only 1 input..
    if move % 2 == 0:
        board[n][m] = 'o'
    else:
        board[n][m] = 'x'
    return board[n][m]

def used_spot(board,n,m): #checks the value of currently chosen coordinates on board..
    if board[n][m] == 'x' or board[n][m] == 'o':
        return True

def check_win(move,board,n,m): #checks the value of every coordinate in specific sequences(=win conditions)..
    if move >= 5:
        row_w = len([board[n][m] for e in board[n] if e == board[n][m]])
        col_w = len([board[i][m] for i in range(3) if board[i][m] == board[n][m]])
        diag1_w = len([board[i][i] for i in range(3) if board[i][i] == board[n][m]])
        diag2_w = len([board[i][2 - i] for i in range(3) if board[i][2 - i] == board[n][m]])
        if row_w == 3 or col_w == 3 or diag1_w == 3 or diag2_w == 3:
            if board[n][m] == 'x':
                print ('\n'+"*** PLAYER_1 WINS! ***")
            else:
                print ('\n'+"*** PLAYER_2 WINS! ***")
            return True

def play_again(move,win,txt): #asks for a next round, adapts to the specific cause of calling this func..
    if win == True or move == 9:
        if move == 9:
            txt = "Its a tie! "
        else:
            txt = ("%s congratulations!\n" % txt)
        repeat = input(txt + "\nDo you want to play again? If yes type Y/y/yes, if not, type anything else: ")
        if repeat.lower() == "y" or repeat.lower() == "yes":
            return True

def printings(board,p1_score,p2_score): #for the sake of sugar in main, gameboard display and round scores..
    print('\n',*board, sep='\n')
    print('\n'+'(p1)',p1_score,':',p2_score,'(p2)','\n')

# Here we go! **********************************************************************************************

if __name__ == '__main__':
    move = 0  #as several funcs depend on move count, this one is crucial
    p1_score = 0
    p2_score = 0
    txt = "Hello PLAYER_1,"
    board = build_gameboard()
    
    while True:
        win = None  #default win state
        while True: #asks for coordinates, checks availability, places the specific symbol, handles bad inputs
            try:
                printings(board,p1_score,p2_score)
                player = ask_player(txt)
                n = int(player[0]) - 1
                m = int(player[1]) - 1
                if used_spot(board,n,m) is not True:
                    move += 1
                    board[n][m] = player_symbol(move,board,n,m)
                else:
                    print("\nSpot taken. ")  
                break
            except ValueError:
                print("\nOops!  That was not a valid input.  Try again...")
            except IndexError:
                print("\nOops!  The number is out of the index range.  Try again...")

        if check_win(move,board,n,m) is True: #runs a win check, if winner, updates player score accordingly
            win = True
            if board[n][m] == 'x':
                p1_score += 1
            else:
                p2_score += 1
        
        if win == True or move == 9: #closes the round, asks for next round, resets board or closes game
            printings(board,p1_score,p2_score)
            if play_again(move,win,txt) == True:
                board = build_gameboard()
                move = 0
                txt = txt_display(move)
                continue
            else:
                print("\nGame over!")  
                break
        txt = txt_display(move) #sets up correct display for the next loop run according to current move count
