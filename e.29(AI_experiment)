import sys, random

def build_gameboard():
    board = []
    for i in range(3):
        board_row = [('.') for e in range(3)]
        board.append(board_row)
    return board

def ask_player():
    player = input("Player, please choose your coordinates[num,num](1=min,3=max).").split(',')
    return player

def player_symbol(board,n,m):
    board[n][m] = 'x'
    return board[n][m]

def ai_symbol(board,row,col):
    board[row][col] = 'o'
    return board[row][col]

def used_spot(board,n,m):
    if board[n][m] == 'x' or board[n][m] == 'o':
        return True

def used_spot_ai(board,row,col):
    if board[row][col] == 'x' or board[row][col] == 'o':
        return True

def player_left_corner_up(board,player):
        player = 'x'
        moveslst = []
        row = 0
        col = 0
        if player == board[0][0] and player == board[0][1]:
            row, col = 0, 2
            if player == board[2][0]:
                row, col = 1, 0
                if player == board[1][2]:
                    ai_field = (1, 2)
                    row, col = 2, random.choice(ai_field)
                else:
                    row, col = 1, 2
            else:
                row, col = 2, 0
        elif player == board[0][0] and player == board[1][0]:
            row, col = 2, 0
            if player == board[0][2]:
                row, col = 0, 1
                if player == board[2][1]:
                    ai_field = (1, 2)
                    row, col = random.choice(ai_field), 2
                else:
                    row, col = 2, 1
            else:
                row, col = 0, 2
        moveslst.append(row)
        moveslst.append(col)
        return moveslst


def player_left_corner_down(board,player):
        player = 'x'
        moveslst = []
        row = 0
        col = 0
        if player == board[2][0] and player == board[1][0]:
            row, col = 0, 0
            if player == board[2][2]:
                row, col = 2, 1
                if player == board[0][1]:
                    ai_field = (0, 1)
                    row, col = random.choice(ai_field), 2
                else:
                    row, col = 0, 1
            else:
                row, col = 2, 2
        elif player == board[2][0] and player == board[2][1]:
            row, col = 2, 2
            if player == board[0][0]:
                row, col = 1, 0
                if player == board[1][2]:
                    ai_field = (1, 2)
                    row, col = 0, random.choice(ai_field)
                else:
                    row,col = 1, 2
            else:
                row, col = 0, 0
        moveslst.append(row)
        moveslst.append(col)
        return moveslst


def player_right_corner_up(board,player):
        player = 'x'
        moveslst = []
        row = 0
        col = 0
        if player == board[0][2] and player == board[1][2]:
            row, col = 2, 2
            if player == board[0][0]:
                row, col = 0, 1
                if player == board[2][1]:
                    ai_field = (1, 2)
                    row, col = random.choice(ai_field), 0
                else:
                    row, col = 2, 1
            else:
                row, col = 0, 0
        elif player == board[0][2] and player == board[0][1]:
            row, col = 0, 0
            if player == board[2][2]:
                row, col = 1, 2
                if player == board[1][0]:
                    ai_field = (0, 1)
                    row, col = 2, random.choice(ai_field)
                else:
                    row,col = 1, 0
            else:
                row, col = 2, 2
        moveslst.append(row)
        moveslst.append(col)
        return moveslst


def player_right_corner_down(board,player):
        player = 'x'
        moveslst = []
        row = 0
        col = 0
        if player == board[2][2] and player == board[2][1]:
            row, col = 2, 0
            if player == board[0][2]:
                row, col = 1, 2
                if player == board[1][0]:
                    ai_field = (0, 1)
                    row, col = 0, random.choice(ai_field)
                else:
                    row, col = 1, 0
            else:
                row, col = 0, 2
        elif player == board[2][2] and player == board[1][2]:
            row, col = 0, 2
            if player == board[2][0]:
                row, col = 2, 1
                if player == board[0][1]:
                    ai_field = (0, 1)
                    row, col = random.choice(ai_field), 0
                else:
                    row,col = 0, 1
            else:
                row, col = 2, 0
        moveslst.append(row)
        moveslst.append(col)
        return moveslst


def player_mid_1stpart(board, player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[1][2]:
        row, col = 1, 0
        if player == board[2][0]:
            row, col = 0, 2
            if player == board[0][1]:
                row, col = 2, 1
            else:
                row, col = 0, 1
        else:
            row, col = 2, 0
    elif player == board[2][2]:
        row, col = 0, 2
        if player == board[0][1]:
            row, col = 2, 1
            if player == board[1][2]:
                row, col = 1, 0
            else:
                row, col = 1, 2
        else:
            row, col = 0, 1
    else:
        pass
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_2ndpart(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[2][1]:
        row, col = 0, 1
        if player == board[0][2]:
            row, col = 2, 0
            if player == board[1][0]:
                row, col = 1, 2
            else:
                row, col = 1, 0
        else:
            row, col = 0, 2
    elif player == board[2][0]:
        row, col = 0, 2
        if player == board[0][1]:
            row, col = 2, 1
            if player == board[1][0]:
                row, col = 1, 2
            else:
                row, col = 1, 0
        else:
            row, col = 0, 1
    else:
        pass
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_1_0_pt1(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[1][0]:
        row, col = 1, 2
        if player == board[0][1]:
            row, col = 2, 1
            if player == board[2][0]:
                row, col = 0, 2
        elif player == board[2][1]:
            row, col = 0, 1
            if player == board[0][2]:
                row, col = 2, 0
            else:
                row, col = 0, 2
        elif player == board[0][2]:
            row, col = 2, 0
            if player == board[0][1]:
                row, col = 2, 1
            elif player == board[2][1]:
                row, col = 0, 1
        elif player == board[2][2]:
            row, col = 0, 1
            if player == board[0][2]:
                row, col = 2, 0
            else:
                row, col = 0, 2
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_1_0_pt2(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[1][0]:
        row, col = 1, 2
        if player == board[2][0]:
            row, col = 0, 2
            if player == board[2][2]:
                row, col = 0, 1
            else:
                row, col = 2, 2
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_0_1_pt1(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[0][1]:
        row, col = 2, 1
        if player == board[1][0]:
            row, col = 1, 2
            if player == board[2][0]:
                row, col = 0, 2
            else:
                row, col = 2, 0
        elif player == board[0][2]:
            row, col = 2, 0
            if player == board[2][2]:
                row, col = 1, 2
            else:
                row, col = 2, 2
        elif player == board[2][0]:
            row, col = 0, 2
            if player == board[1][0]:
                row, col = 1, 2
            else:
                row, col = 1, 0
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_0_1_pt2(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[0][1]:
        row, col = 2, 1
        if player == board[1][2]:
            row, col = 1, 0
            if player == board[2][0]:
                row, col = 0, 2
            else:
                row, col = 2, 0
        elif player == board[2][2]:
            row, col = 1, 0
            if player == board[2][0]:
                row, col = 0, 2
            else:
                row, col = 2, 0
        else:
            pass
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def player_mid_0_2(board,player):
    player = 'x'
    moveslst = []
    row = 0
    col = 0
    if player == board[0][2]:
        row, col = 2, 0
        if player == board[1][0]:
            row, col = 1, 2
            if player == board[0][1]:
                row, col = 2, 1
            else:
                row, col = 0, 1
        else:
            row, col = 1, 0
    moveslst.append(row)
    moveslst.append(col)
    return moveslst

def connector_1_0(board,player):
    moveslst = []
    a = player_mid_1_0_pt1(board,player)
    b = player_mid_1_0_pt2(board,player)
    moveslst.append(a)
    moveslst. append(b)
    return moveslst

def connector_0_1(board,player):
    moveslst = []
    a = player_mid_0_1_pt1(board,player)
    b = player_mid_0_1_pt2(board,player)
    moveslst.append(a)
    moveslst. append(b)
    return moveslst

def connector_all(board,player):
    player = 'x'
    moveslst = []
    if player == board[1][2] or player == board[2][2]:
        moveslst = player_mid_1stpart(board, player)
    elif player == board[2][1] or player == board[2][0]:
        moveslst = player_mid_2ndpart(board,player)
    elif player == board[1][0]:
        moveslst = connector_1_0(board,player)
    elif player == board[0][1]:
        moveslst = connector_0_1(board,player)
    elif player == board[0][2]:
        moveslst = player_mid_0_2(board,player)
    else:
        pass
    return moveslst

def ai_move(board,player):
    ai = 'o'
    player = 'x'
    moveslst = []
    if ai != player:
        if player == board[1][1]:
            row = 0
            col = 0
            if ai == [0][0]:
                ai_moveslst = []
                a = connector_all(board,player)
                ai_moveslst.append(a)
                row = ai_moveslst[0]
                col = ai_moveslst[1]
            moveslst.append(row)
            moveslst.append(col)
        else:
            row, col = 1, 1
            if player == board[0][0]:
                ai_moveslst = player_left_corner_up(board,player)
                row, col = ai_moveslst[0], ai_moveslst[1]
            elif player == board[2][0]:
                ai_moveslst = player_left_corner_down(board,player)
                row, col = ai_moveslst[0], ai_moveslst[1]
            elif player == board[0][2]:
                ai_moveslst = player_right_corner_up(board,player)
                row, col = ai_moveslst[0], ai_moveslst[1]
            elif player == board[2][2]:
                ai_moveslst = player_right_corner_down(board,player)
                row, col = ai_moveslst[0], ai_moveslst[1]
            else:
                pass
            moveslst.append(row)
            moveslst.append(col)
    return moveslst

def ai_row(board,player):
    moveslst = ai_move(board,player)
    return moveslst[0]

def ai_col(board,player):
    moveslst = ai_move(board,player)
    return moveslst[1]

def check_win(board,n,m):
        row_w = len([board[n][m] for e in board[n] if e == board[n][m]])
        col_w = len([board[i][m] for i in range(3) if board[i][m] == board[n][m]])
        diag1_w = len([board[i][i] for i in range(3) if board[i][i] == board[n][m]])
        diag2_w = len([board[i][2 - i] for i in range(3) if board[i][2 - i] == board[n][m]])
        if row_w == 3 or col_w == 3 or diag1_w == 3 or diag2_w == 3:
            if board[n][m] == 'x':
                print ('\n'+"*** PLAYER_1 WINS! ***")
            return True

def check_win_ai(board,row,col):
        row_w = len([board[row][col] for e in board[row] if e == board[row][col]])
        col_w = len([board[i][col] for i in range(3) if board[i][col] == board[row][col]])
        diag1_w = len([board[i][i] for i in range(3) if board[i][i] == board[row][col]])
        diag2_w = len([board[i][2 - i] for i in range(3) if board[i][2 - i] == board[row][col]])
        if row_w == 3 or col_w == 3 or diag1_w == 3 or diag2_w == 3:
            if board[row][col] == 'o':
                print ('\n'+"*** PLAYER_2 WINS! ***")
            return True

def play_again(win,txt):
    if win == True:
        txt = ("%s congratulations!\n" % txt)
        repeat = input(txt + "\nDo you want to play again? If yes type Y/y/yes, if not, type anything else: ")
        if repeat.lower() == "y" or repeat.lower() == "yes":
            return True

def printings(board,p1_score,p2_score):
    print('\n',*board, sep='\n')
    print('\n'+'(p1)',p1_score,':',p2_score,'(p2)','\n')

# Here we go! **********************************************************************************************

def main():
    p1_score = 0
    p2_score = 0
    txt = ""
    board = build_gameboard()
    
    while True:
        win = None
        printings(board,p1_score,p2_score)
        
        while True:
            player = ask_player()
            n = int(player[0]) - 1
            m = int(player[1]) - 1
            if used_spot(board,n,m) is not True:
                board[n][m] = player_symbol(board,n,m)
                break
            else:
                print("spot taken...")
            
        while True:
            row = ai_row(board,player)
            col = ai_col(board,player)
            if used_spot_ai(board,row,col) is not True:
                board[row][col] = ai_symbol(board,row,col)
                print("Ai..")
                break
        
        if check_win(board,n,m) == True or check_win_ai(board,row,col) == True:
            printings(board,p1_score,p2_score)
            win = True
            if board[n][m] == 'x':
                p1_score += 1
            else:
                p2_score += 1
            if play_again(win,txt) == True:
                board = build_gameboard()
                continue
            else:
                print("\nGame over!")  
                break

main()
